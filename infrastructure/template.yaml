AWSTemplateFormatVersion: '2010-09-09'
Description: EKS Cluster with Single Node using existing VPC and Subnet

Parameters:
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: ID of the existing VPC
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of Subnets in different Availability Zones
  ClusterName:
    Type: String
    Description: EKS Cluster Name
    Default: EKS-SingleNodeCluster
  NodeGroupName:
    Type: String
    Description: Name of the EKS node group
    Default: NodeGroupEKS
  NodeInstanceType:
    Type: String
    Description: EC2 instance type for the worker nodes
    Default: t3.large
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "eks-cluster-resources-${AWS::AccountId}-${AWS::Region}"
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: "EKSClusterResourcesBucket"

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ClusterName}-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
  # EKS Cluster
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      ResourcesVpcConfig:
        SubnetIds: !Ref SubnetIds
        EndpointPublicAccess: true
        EndpointPrivateAccess: false
      RoleArn: !GetAtt EKSClusterRole.Arn

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: example-code
      ImageTagMutability: MUTABLE
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Remove untagged images older than 30 days",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 30
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Environment
          Value: Production

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref ClusterName
      NodegroupName: !Ref NodeGroupName
      NodeRole: !GetAtt NodeInstanceRole.Arn
      Subnets: !Ref SubnetIds
      ScalingConfig:
        DesiredSize: 1
        MinSize: 1
        MaxSize: 1
      InstanceTypes:
        - !Ref NodeInstanceType

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ClusterName}-node-instance-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

